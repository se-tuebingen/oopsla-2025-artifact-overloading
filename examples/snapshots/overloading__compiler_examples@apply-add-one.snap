---
source: src/main.rs
expression: output
input_file: examples/apply-add-one.over
---
{
  "status": "success",
  "expression": "assume apply: ∀(A, B ). ((A) => B) => (A) => B\nassume addOneI: (Int) => Int\nassume addOneS: (String) => String\nassume addOneD: (Double) => Double\nlet addOne = a‹addOneI, addOneS, addOneD›\napply(addOne)(42)",
  "dimension_spans": "[spans]",
  "inferred_type": "app_4",
  "worlds": {
    "type": "one"
  },
  "solutions": [
    [
      "a₁"
    ]
  ],
  "constraints": [
    {
      "from": "(Int) => Int",
      "choices": [
        "a₁"
      ],
      "to": "over_a_0"
    },
    {
      "from": "(String) => String",
      "choices": [
        "a₂"
      ],
      "to": "over_a_0"
    },
    {
      "from": "(Double) => Double",
      "choices": [
        "a₃"
      ],
      "to": "over_a_0"
    },
    {
      "from": "((A_1) => B_2) => (A_1) => B_2",
      "choices": [],
      "to": "(over_a_0) => app_3"
    },
    {
      "from": "app_3",
      "choices": [],
      "to": "(Int) => app_4"
    }
  ],
  "bounds": [
    {
      "variable": "A_1",
      "lower": [
        {
          "type_name": "Int",
          "choices": []
        }
      ],
      "upper": [
        {
          "type_name": "Double",
          "choices": [
            "a₃"
          ]
        },
        {
          "type_name": "Int",
          "choices": [
            "a₁"
          ]
        },
        {
          "type_name": "String",
          "choices": [
            "a₂"
          ]
        }
      ]
    },
    {
      "variable": "B_2",
      "lower": [
        {
          "type_name": "Double",
          "choices": [
            "a₃"
          ]
        },
        {
          "type_name": "Int",
          "choices": [
            "a₁"
          ]
        },
        {
          "type_name": "String",
          "choices": [
            "a₂"
          ]
        }
      ],
      "upper": [
        {
          "type_name": "app_4",
          "choices": []
        }
      ]
    },
    {
      "variable": "app_3",
      "lower": [
        {
          "type_name": "(A_1) => B_2",
          "choices": []
        }
      ],
      "upper": [
        {
          "type_name": "(Int) => app_4",
          "choices": []
        }
      ]
    },
    {
      "variable": "app_4",
      "lower": [
        {
          "type_name": "Double",
          "choices": [
            "a₃"
          ]
        },
        {
          "type_name": "Int",
          "choices": [
            "a₁"
          ]
        },
        {
          "type_name": "String",
          "choices": [
            "a₂"
          ]
        }
      ],
      "upper": []
    },
    {
      "variable": "over_a_0",
      "lower": [
        {
          "type_name": "(Double) => Double",
          "choices": [
            "a₃"
          ]
        },
        {
          "type_name": "(Int) => Int",
          "choices": [
            "a₁"
          ]
        },
        {
          "type_name": "(String) => String",
          "choices": [
            "a₂"
          ]
        }
      ],
      "upper": [
        {
          "type_name": "(A_1) => B_2",
          "choices": []
        }
      ]
    }
  ],
  "errors": [
    {
      "constraint": {
        "from": "Int",
        "choices": [
          "a₂"
        ],
        "to": "String"
      },
      "message": "Incompatible base types"
    },
    {
      "constraint": {
        "from": "Int",
        "choices": [
          "a₃"
        ],
        "to": "Double"
      },
      "message": "Incompatible base types"
    }
  ]
}
