---
source: src/main.rs
expression: output
input_file: examples/recursion.over
---
{
  "status": "success",
  "expression": "assume emptyD: (Double) => Bool\nassume emptyI: (Int) => Bool\nassume emptyS: (String) => Bool\nassume addS: (String, String) => String\nassume addD: (Double, Double) => Double\nassume addI: (Int, Int) => Int\nassume subD: (Double, Double) => Double\nassume subI: (Int, Int) => Int\nassume myShowStr: (String) => String\nlet rec myShowInt = λ n => let empty = e‹emptyD, emptyI, emptyS›\nlet show = s‹myShowInt, myShowStr›\nlet add = a‹addD, addI, addS›\nlet sub = m‹subD, subI›\nif empty(n) then \"\" else add(\"|\", show(sub(n, 1))) => \n  let empty = e‹emptyD, emptyI, emptyS›\n  let show = s‹myShowInt, myShowStr›\n  let add = a‹addD, addI, addS›\n  let sub = m‹subD, subI›\n  if empty(n) then \"\" else add(\"|\", show(sub(n, 1)))\nmyShowInt",
  "inferred_type": "rec_0",
  "worlds": {
    "type": "one"
  },
  "solutions": [
    [
      "e₂",
      "s₁",
      "a₃",
      "m₂"
    ]
  ],
  "constraints": [
    {
      "from": "(Double) => Bool",
      "choices": [
        "e₁"
      ],
      "to": "over_e_2"
    },
    {
      "from": "(Int) => Bool",
      "choices": [
        "e₂"
      ],
      "to": "over_e_2"
    },
    {
      "from": "(String) => Bool",
      "choices": [
        "e₃"
      ],
      "to": "over_e_2"
    },
    {
      "from": "rec_0",
      "choices": [
        "s₁"
      ],
      "to": "over_s_3"
    },
    {
      "from": "(String) => String",
      "choices": [
        "s₂"
      ],
      "to": "over_s_3"
    },
    {
      "from": "(Double, Double) => Double",
      "choices": [
        "a₁"
      ],
      "to": "over_a_4"
    },
    {
      "from": "(Int, Int) => Int",
      "choices": [
        "a₂"
      ],
      "to": "over_a_4"
    },
    {
      "from": "(String, String) => String",
      "choices": [
        "a₃"
      ],
      "to": "over_a_4"
    },
    {
      "from": "(Double, Double) => Double",
      "choices": [
        "m₁"
      ],
      "to": "over_m_5"
    },
    {
      "from": "(Int, Int) => Int",
      "choices": [
        "m₂"
      ],
      "to": "over_m_5"
    },
    {
      "from": "over_e_2",
      "choices": [],
      "to": "(n_1) => app_7"
    },
    {
      "from": "over_m_5",
      "choices": [],
      "to": "(n_1, Int) => app_8"
    },
    {
      "from": "over_s_3",
      "choices": [],
      "to": "(app_8) => app_9"
    },
    {
      "from": "over_a_4",
      "choices": [],
      "to": "(String, app_9) => app_10"
    },
    {
      "from": "app_7",
      "choices": [],
      "to": "Bool"
    },
    {
      "from": "String",
      "choices": [],
      "to": "if_6"
    },
    {
      "from": "app_10",
      "choices": [],
      "to": "if_6"
    },
    {
      "from": "(n_1) => if_6",
      "choices": [],
      "to": "rec_0"
    }
  ],
  "bounds": [
    {
      "variable": "app_10",
      "lower": [
        {
          "type_name": "Double",
          "choices": [
            "a₁"
          ]
        },
        {
          "type_name": "Int",
          "choices": [
            "a₂"
          ]
        },
        {
          "type_name": "String",
          "choices": [
            "a₃"
          ]
        }
      ],
      "upper": [
        {
          "type_name": "if_6",
          "choices": []
        }
      ]
    },
    {
      "variable": "app_7",
      "lower": [
        {
          "type_name": "Bool",
          "choices": [
            "e₁"
          ]
        },
        {
          "type_name": "Bool",
          "choices": [
            "e₂"
          ]
        },
        {
          "type_name": "Bool",
          "choices": [
            "e₃"
          ]
        }
      ],
      "upper": [
        {
          "type_name": "Bool",
          "choices": []
        }
      ]
    },
    {
      "variable": "app_8",
      "lower": [
        {
          "type_name": "Double",
          "choices": [
            "m₁"
          ]
        },
        {
          "type_name": "Int",
          "choices": [
            "m₂"
          ]
        }
      ],
      "upper": [
        {
          "type_name": "String",
          "choices": [
            "s₂"
          ]
        },
        {
          "type_name": "n_1",
          "choices": [
            "s₁"
          ]
        }
      ]
    },
    {
      "variable": "app_9",
      "lower": [
        {
          "type_name": "Double",
          "choices": [
            "s₁",
            "a₁"
          ]
        },
        {
          "type_name": "Int",
          "choices": [
            "s₁",
            "a₂"
          ]
        },
        {
          "type_name": "String",
          "choices": [
            "s₁"
          ]
        },
        {
          "type_name": "String",
          "choices": [
            "s₁",
            "a₃"
          ]
        },
        {
          "type_name": "String",
          "choices": [
            "s₂"
          ]
        }
      ],
      "upper": [
        {
          "type_name": "Double",
          "choices": [
            "a₁"
          ]
        },
        {
          "type_name": "Int",
          "choices": [
            "a₂"
          ]
        },
        {
          "type_name": "String",
          "choices": [
            "a₃"
          ]
        }
      ]
    },
    {
      "variable": "if_6",
      "lower": [
        {
          "type_name": "Double",
          "choices": [
            "a₁"
          ]
        },
        {
          "type_name": "Int",
          "choices": [
            "a₂"
          ]
        },
        {
          "type_name": "String",
          "choices": []
        },
        {
          "type_name": "String",
          "choices": [
            "a₃"
          ]
        }
      ],
      "upper": [
        {
          "type_name": "app_9",
          "choices": [
            "s₁"
          ]
        }
      ]
    },
    {
      "variable": "n_1",
      "lower": [
        {
          "type_name": "Double",
          "choices": [
            "s₁",
            "m₁"
          ]
        },
        {
          "type_name": "Int",
          "choices": [
            "s₁",
            "m₂"
          ]
        }
      ],
      "upper": [
        {
          "type_name": "Double",
          "choices": [
            "e₁"
          ]
        },
        {
          "type_name": "Double",
          "choices": [
            "m₁"
          ]
        },
        {
          "type_name": "Int",
          "choices": [
            "e₂"
          ]
        },
        {
          "type_name": "Int",
          "choices": [
            "m₂"
          ]
        },
        {
          "type_name": "String",
          "choices": [
            "e₃"
          ]
        }
      ]
    },
    {
      "variable": "over_a_4",
      "lower": [
        {
          "type_name": "(Double, Double) => Double",
          "choices": [
            "a₁"
          ]
        },
        {
          "type_name": "(Int, Int) => Int",
          "choices": [
            "a₂"
          ]
        },
        {
          "type_name": "(String, String) => String",
          "choices": [
            "a₃"
          ]
        }
      ],
      "upper": [
        {
          "type_name": "(String, app_9) => app_10",
          "choices": []
        }
      ]
    },
    {
      "variable": "over_e_2",
      "lower": [
        {
          "type_name": "(Double) => Bool",
          "choices": [
            "e₁"
          ]
        },
        {
          "type_name": "(Int) => Bool",
          "choices": [
            "e₂"
          ]
        },
        {
          "type_name": "(String) => Bool",
          "choices": [
            "e₃"
          ]
        }
      ],
      "upper": [
        {
          "type_name": "(n_1) => app_7",
          "choices": []
        }
      ]
    },
    {
      "variable": "over_m_5",
      "lower": [
        {
          "type_name": "(Double, Double) => Double",
          "choices": [
            "m₁"
          ]
        },
        {
          "type_name": "(Int, Int) => Int",
          "choices": [
            "m₂"
          ]
        }
      ],
      "upper": [
        {
          "type_name": "(n_1, Int) => app_8",
          "choices": []
        }
      ]
    },
    {
      "variable": "over_s_3",
      "lower": [
        {
          "type_name": "(String) => String",
          "choices": [
            "s₂"
          ]
        },
        {
          "type_name": "(n_1) => if_6",
          "choices": [
            "s₁"
          ]
        }
      ],
      "upper": [
        {
          "type_name": "(app_8) => app_9",
          "choices": []
        }
      ]
    },
    {
      "variable": "rec_0",
      "lower": [
        {
          "type_name": "(n_1) => if_6",
          "choices": []
        }
      ],
      "upper": [
        {
          "type_name": "over_s_3",
          "choices": [
            "s₁"
          ]
        }
      ]
    }
  ],
  "errors": [
    {
      "constraint": {
        "from": "Double",
        "choices": [
          "e₂",
          "s₁",
          "m₁"
        ],
        "to": "Int"
      },
      "message": "Incompatible base types"
    },
    {
      "constraint": {
        "from": "Double",
        "choices": [
          "e₃",
          "s₁",
          "m₁"
        ],
        "to": "String"
      },
      "message": "Incompatible base types"
    },
    {
      "constraint": {
        "from": "Double",
        "choices": [
          "s₁",
          "a₁",
          "a₂"
        ],
        "to": "Int"
      },
      "message": "Incompatible base types"
    },
    {
      "constraint": {
        "from": "Double",
        "choices": [
          "s₁",
          "a₁",
          "a₃"
        ],
        "to": "String"
      },
      "message": "Incompatible base types"
    },
    {
      "constraint": {
        "from": "Double",
        "choices": [
          "s₁",
          "m₁",
          "m₂"
        ],
        "to": "Int"
      },
      "message": "Incompatible base types"
    },
    {
      "constraint": {
        "from": "Double",
        "choices": [
          "s₂",
          "m₁"
        ],
        "to": "String"
      },
      "message": "Incompatible base types"
    },
    {
      "constraint": {
        "from": "Int",
        "choices": [
          "e₁",
          "s₁",
          "m₂"
        ],
        "to": "Double"
      },
      "message": "Incompatible base types"
    },
    {
      "constraint": {
        "from": "Int",
        "choices": [
          "e₃",
          "s₁",
          "m₂"
        ],
        "to": "String"
      },
      "message": "Incompatible base types"
    },
    {
      "constraint": {
        "from": "Int",
        "choices": [
          "m₁"
        ],
        "to": "Double"
      },
      "message": "Incompatible base types"
    },
    {
      "constraint": {
        "from": "Int",
        "choices": [
          "s₁",
          "a₂",
          "a₁"
        ],
        "to": "Double"
      },
      "message": "Incompatible base types"
    },
    {
      "constraint": {
        "from": "Int",
        "choices": [
          "s₁",
          "a₂",
          "a₃"
        ],
        "to": "String"
      },
      "message": "Incompatible base types"
    },
    {
      "constraint": {
        "from": "Int",
        "choices": [
          "s₁",
          "m₂",
          "m₁"
        ],
        "to": "Double"
      },
      "message": "Incompatible base types"
    },
    {
      "constraint": {
        "from": "Int",
        "choices": [
          "s₂",
          "m₂"
        ],
        "to": "String"
      },
      "message": "Incompatible base types"
    },
    {
      "constraint": {
        "from": "String",
        "choices": [
          "a₁"
        ],
        "to": "Double"
      },
      "message": "Incompatible base types"
    },
    {
      "constraint": {
        "from": "String",
        "choices": [
          "a₂"
        ],
        "to": "Int"
      },
      "message": "Incompatible base types"
    },
    {
      "constraint": {
        "from": "String",
        "choices": [
          "s₁",
          "a₁"
        ],
        "to": "Double"
      },
      "message": "Incompatible base types"
    },
    {
      "constraint": {
        "from": "String",
        "choices": [
          "s₁",
          "a₂"
        ],
        "to": "Int"
      },
      "message": "Incompatible base types"
    },
    {
      "constraint": {
        "from": "String",
        "choices": [
          "s₁",
          "a₃",
          "a₁"
        ],
        "to": "Double"
      },
      "message": "Incompatible base types"
    },
    {
      "constraint": {
        "from": "String",
        "choices": [
          "s₁",
          "a₃",
          "a₂"
        ],
        "to": "Int"
      },
      "message": "Incompatible base types"
    },
    {
      "constraint": {
        "from": "String",
        "choices": [
          "s₂",
          "a₁"
        ],
        "to": "Double"
      },
      "message": "Incompatible base types"
    },
    {
      "constraint": {
        "from": "String",
        "choices": [
          "s₂",
          "a₂"
        ],
        "to": "Int"
      },
      "message": "Incompatible base types"
    }
  ]
}
