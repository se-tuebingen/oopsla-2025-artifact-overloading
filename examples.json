[
  {
    "name": "Section 1.1.1",
    "path": "examples/sec-1-1-1.over",
    "code": "// Example: Section 1.1.1\n\n// Assume the existence of `addInt` and `addString`\nassume addInt: (Int, Int) => Int;\nassume addString: (String, String) => String;\n\n// The program itself starts here:\n// `1 + 2` in the \"surface language\" of the paper\n// is the following in Variational Core (the language of this artifact)\n\nlet f = a<addInt, addString>; // note: `let` is _not_ generalized\nf(1, 2)\n\n// Only one valid overload (world): a = 1 (addInt)",
    "_hash": "90bd361f3831b49127fc82041c096e4b"
  },
  {
    "name": "Section 2.1",
    "path": "examples/sec-2-1.over",
    "code": "// Example: Section 2.1\nassume addInt: (Int, Int) => Int;\nassume addString: (String, String) => String;\n\n// In \"surface language\": `\u03bbx => 0 + (x + x)`\n\u03bb(x) =>\n  let add_b = b<addInt, addString>;\n  let inner = add_b(x, x);\n  let add_a = a<addInt, addString>;\n  add_a(0, inner)\n\n// Only one valid overload (world): a = 1 (addInt) & b = 1 (addInt)",
    "_hash": "6f82708043b6627ebcd9902c24063c83"
  },
  {
    "name": "Section 2.2",
    "path": "examples/sec-2-2.over",
    "code": "// Example: Section 2.2\nassume readInt: String => Int;\nassume readDouble: String => Double;\n\nassume showInt: Int => String;\nassume showDouble: Double => String;\nassume showString: String => String;\n\n// In \"surface language\": `\u03bb str => show(read(str))`\n\u03bb(str) =>\n  let read = a<readInt, readDouble>;\n  let value = read(str);\n  let show = b<showInt, showDouble, showString>;\n  show(value)\n\n// Two possible overloads (worlds):\n// 1. a = 1 (readInt) & b = 1 (showInt)\n// 2. a = 2 (readDouble) & b = 2 (showDouble)\n// No other combinations are valid.",
    "_hash": "9b41f0904c76b9cea28ac870e940d74d"
  },
  {
    "name": "Section 2.3",
    "path": "examples/sec-2-3.over",
    "code": "// Example: Section 2.3\nassume addInt: (Int, Int) => Int;\nassume addString: (String, String) => String;\n\n// In surface language: `\u03bb x => (x + 2) + \"3\"\n\u03bb (x) =>\n  let add_a = a<addInt, addString>;\n  let fst = add_a(x, 2);\n  let add_b = b<addInt, addString>;\n  let snd = add_b(fst, \"3\");\n  snd\n\n// No valid overloads (\"worlds\")",
    "_hash": "6bd50efffecbcdc24e8fbf91e08e0b34"
  },
  {
    "name": "Section 2.4.1, example A",
    "path": "examples/sec-2-4-1-A.over",
    "code": "// Example A: Section 2.4.1\n// (compare with example B of the same section)\nassume addInt: (Int, Int) => Int;\n\n// The invalid call lives outside of an alterative, in all worlds at once.\nlet invalid = addInt(\"\", 0);\nlet exampleA = a<invalid, 42>;\n\nexampleA\n\n// Therefore there are no valid overloads.",
    "_hash": "2e42a6fdc013e6025bf9f1f37647940a"
  },
  {
    "name": "Section 2.4.1, example B",
    "path": "examples/sec-2-4-1-B.over",
    "code": "// Example B: Section 2.4.1\n// (compare with example B of the same section)\nassume addInt: (Int, Int) => Int;\n\n// The invalid call lives inside of worlds where a = 1\nlet exampleB = a<addInt(\"\", 0), 42>;\nexampleB\n\n// so we can reject that world and choose the one where a = 2!\n",
    "_hash": "2e3cfa368d522818cf878a29f498c0b6"
  },
  {
    "name": "Section 2.4.2",
    "path": "examples/sec-2-4-2.over",
    "code": "// Example: Section 2.4.2\n\n// Notice that there are _four_ different valid worlds:\n// two dimensions, `a` and `b`, each having two alternatives.\nlet defaultNum = a<0, 0.0>;\nb<defaultNum, \"\">\n\n// You can also inline `defaultNum`.\n\n// This demonstrates that you can't faithfully encode\n// N-ary choices using only binary choices.",
    "_hash": "777164ce2fbfaf838abe162135b8b21b"
  },
  {
    "name": "Section 4.3.1",
    "path": "examples/sec-4-3-1.over",
    "code": "// Example: Section 4.3.1\nassume addInt: (Int, Int) => Int;\nassume addDouble: (Double, Double) => Double;\n\nassume printInt: Int => Unit;\nassume printString: String => Unit;\n\n// Notice that the dimensions are in two \"clusters\"\n// that could be resolved independently:\n// - `a` and `b` (from `add1` and `print1`)\n// - `c` and `d` (from `add2` and `print2`)\nlet add1 = a<addInt, addDouble>;\nlet print1 = b<printInt, printString>;\nlet add2 = c<addInt, addDouble>;\nlet print2 = d<printInt, printString>;\n\nlet _r1 = print1(add1(1, 2));\nprint2(add2(3, 4))\n",
    "_hash": "c336dfc632fe29dd02160d3a0f6cebaf"
  },
  {
    "name": "Section 5.2",
    "path": "examples/sec-5-2.over",
    "code": "// Example: Section 5.2\n\n// \"Lateral\" flow,\n// take a look at the bounds for `if_0`!\nif true\n  then a<0, \"\">\n  else \"hello\"\n",
    "_hash": "3fc6d7b9e80ebe2438d889bf3fd47581"
  },
  {
    "name": "Benchmark: 3sat-orig",
    "path": "benchmarks/3sat-orig.over",
    "code": "// Lambda Expressions vs. Anonymous Methods, Part Five\n//   by Eric Lippert\n// https://learn.microsoft.com/en-us/archive/blogs/ericlippert/lambda-expressions-vs-anonymous-methods-part-five\n// Encoding 3-SAT using overloading!\n\nassume orTTT: (T, T, T) => T;\nassume orTTF: (T, T, F) => T;\nassume orTFT: (T, F, T) => T;\nassume orFTT: (F, T, T) => T;\nassume orTFF: (T, F, F) => T;\nassume orFTF: (F, T, F) => T;\nassume orFFT: (F, F, T) => T;\nassume orFFF: (F, F, F) => F;\nassume or = <orTTT, orTTF, orTFT, orFTT, orTFF, orFTF, orFFT, orFFF>;\n\nassume andTT: (T, T) => T;\nassume andTF: (T, F) => F;\nassume andFT: (F, T) => F;\nassume andFF: (F, F) => F;\nassume and = <andTT, andTF, andFT, andFF>;\n\nassume notT: T => F;\nassume notF: F => T;\nassume not = <notT, notF>;\n\nassume mustBeTrue: T => Unit;\n\nassume MT: (T => Unit) => Unit;\nassume MF: (F => Unit) => Unit;\nassume M = <MT, MF>;\n\n// (!x3) & ((!x1) & ((x1 | x2 | x1) & (x2 | x3 | x2)))\nM(\u03bb(x1) => M(\u03bb(x2) => M(\u03bb(x3) =>\n  mustBeTrue(\n    and(not(x3),\n      and(not(x1),\n        and(\n          or(x1, x2, x1),\n          or(x2, x3, x2)))))\n)))\n",
    "_hash": "67f939aae0d1c127fa30fd70d4f15a2e"
  },
  {
    "name": "Benchmark: 3sat-hard",
    "path": "benchmarks/3sat-hard.over",
    "code": "// Originally from:\n// Lambda Expressions vs. Anonymous Methods, Part Five\n//   by Eric Lippert\n// https://learn.microsoft.com/en-us/archive/blogs/ericlippert/lambda-expressions-vs-anonymous-methods-part-five\n// Encoding 3-SAT using overloading!\n\nassume orTTT: (T, T, T) => T;\nassume orTTF: (T, T, F) => T;\nassume orTFT: (T, F, T) => T;\nassume orFTT: (F, T, T) => T;\nassume orTFF: (T, F, F) => T;\nassume orFTF: (F, T, F) => T;\nassume orFFT: (F, F, T) => T;\nassume orFFF: (F, F, F) => F;\nassume or = <orTTT, orTTF, orTFT, orFTT, orTFF, orFTF, orFFT, orFFF>;\n\nassume andTT: (T, T) => T;\nassume andTF: (T, F) => F;\nassume andFT: (F, T) => F;\nassume andFF: (F, F) => F;\nassume and = <andTT, andTF, andFT, andFF>;\n\nassume notT: T => F;\nassume notF: F => T;\nassume not = <notT, notF>;\n\nassume mustBeTrue: T => Unit;\n\nassume MT: (T => Unit) => Unit;\nassume MF: (F => Unit) => Unit;\nassume M = <MT, MF>;\n\n// (\u00aca \u2228 \u00acb \u2228 \u00acc) AND ( a \u2228  b \u2228 \u00acc) AND ( a \u2228 \u00acb \u2228  c) AND (\u00aca \u2228  b \u2228  c) AND (\u00aca \u2228  \u00acb \u2228  c) AND (a \u2228  \u00acb \u2228  \u00acc) AND (\u00aca \u2228  b \u2228  \u00acc)\nM(\u03bb(a) => M(\u03bb(b) => M(\u03bb(c) =>\n  mustBeTrue(\n      and(or(not(a), not(b), not(c)),\n        and(or(a, b, not(c)),\n          and(or(a, not(b), c),\n            and(or(not(a), b, c),\n              and(or(not(a), not(b), c),\n                and(or(a, not(b), not(c)),\n                     or(not(a), b, not(c)))))))))\n)))\n",
    "_hash": "a6dea44c32258b59c0da49fbe97a4d60"
  },
  {
    "name": "Benchmark: uri-orig",
    "path": "benchmarks/uri-orig.over",
    "code": "// Example translated from Swift: https://danielchasehooper.com/posts/why-swift-is-slow/\nassume addInt: (Int, Int) => Int;\nassume addString: (String, String) => String;\nassume addDouble: (Double, Double) => Double;\nassume add = <addInt, addString, addDouble>;\n\nlet address = \"127.0.0.1\" in\nlet username = \"steve\" in\nlet password = \"1234\" in\nlet channel = 11 in // change to \"11\" to fix the type error\n\nadd(\"http://\",\n  add(username,\n    add(\":\",\n      add(password,\n        add(\"@\",\n          add(address,\n            add(\"/api/\",\n              add(channel,\n                \"/picture\"))))))))\n",
    "_hash": "772cdb7e0c496bb913e15a897b790edf"
  },
  {
    "name": "Benchmark: uri-big",
    "path": "benchmarks/uri-big.over",
    "code": "// Enlarged example translated from Swift: https://danielchasehooper.com/posts/why-swift-is-slow/\nassume addInt: (Int, Int) => Int;\nassume addString: (String, String) => String;\nassume addDouble: (Double, Double) => Double;\nassume addDoubleInt: (Double, Int) => Double;\nassume addIntDouble: (Int, Double) => Double;\nassume add = <addInt, addString, addDouble, addDoubleInt, addIntDouble>;\n\n// Network configuration\nlet subdomain = \"api\" in\nlet domain = \"example\" in\nlet tld = \"com\" in\nlet port = 8443 in // !!!\nlet basePath = \"/v2\" in\nlet service = \"users\" in\nlet endpoint = \"profile\" in\n\n// Authentication\nlet authType = \"Bearer\" in\nlet tokenPrefix = \"jwt_\" in\nlet tokenMiddle = \"secure_token_\" in\nlet tokenSuffix = \"abc123\" in\nlet apiKey = \"key_\" in\nlet apiSecret = \"secret_value_\" in\nlet clientId = \"client_\" in\nlet clientSecret = \"super_secret_\" in\n\n// User data\nlet userId = 12345 in // !!!\nlet username = \"john_doe\" in\nlet firstName = \"John\" in\nlet lastName = \"Doe\" in\nlet email = \"john.doe\" in\nlet emailDomain = \"company.com\" in\nlet department = \"engineering\" in\nlet team = \"backend\" in\nlet role = \"senior\" in\nlet level = \"staff\" in\n\n// Request parameters\nlet format = \"json\" in\nlet version = \"v1\" in\nlet timestamp = \"2024\" in\nlet month = \"07\" in\nlet day = \"18\" in\nlet separator = \"-\" in\nlet timePrefix = \"T\" in\nlet hour = \"14\" in\nlet minute = \"30\" in\nlet second = \"00\" in\nlet timezone = \"Z\" in\n\n// Additional metadata\nlet requestId = \"req_\" in\nlet sessionId = \"sess_\" in\nlet correlationId = \"corr_\" in\nlet traceId = \"trace_\" in\nlet spanId = \"span_\" in\nlet userAgent = \"SwiftClient\" in\nlet clientVersion = \"1.0.0\" in\nlet platform = \"iOS\" in\nlet osVersion = \"17.0\" in\n\nadd(\"https://\",\n  add(subdomain,\n    add(\".\",\n      add(domain,\n        add(\".\",\n          add(tld,\n            add(\":\",\n              add(port,  // This integer forces overload resolution complexity\n                add(basePath,\n                  add(\"/\",\n                    add(service,\n                      add(\"/\",\n                        add(endpoint,\n                          add(\"?user_id=\",\n                            add(userId,  // Another integer to make it even more complex\n                              add(\"&username=\",\n                                add(username,\n                                  add(\"&first_name=\",\n                                    add(firstName,\n                                      add(\"&last_name=\",\n                                        add(lastName,\n                                          add(\"&email=\",\n                                            add(email,\n                                              add(\"@\",\n                                                add(emailDomain,\n                                                  add(\"&department=\",\n                                                    add(department,\n                                                      add(\"&team=\",\n                                                        add(team,\n                                                          add(\"&role=\",\n                                                            add(role,\n                                                              add(\"&level=\",\n                                                                add(level,\n                                                                  add(\"&format=\",\n                                                                    add(format,\n                                                                      add(\"&version=\",\n                                                                        add(version,\n                                                                          add(\"&timestamp=\",\n                                                                            add(timestamp,\n                                                                              add(separator,\n                                                                                add(month,\n                                                                                  add(separator,\n                                                                                    add(day,\n                                                                                      add(timePrefix,\n                                                                                        add(hour,\n                                                                                          add(\":\",\n                                                                                            add(minute,\n                                                                                              add(\":\",\n                                                                                                add(second,\n                                                                                                  add(timezone,\n                                                                                                    add(\"&request_id=\",\n                                                                                                      add(requestId,\n                                                                                                        add(\"12345\",\n                                                                                                          add(\"&session_id=\",\n                                                                                                            add(sessionId,\n                                                                                                              add(\"67890\",\n                                                                                                                add(\"&correlation_id=\",\n                                                                                                                  add(correlationId,\n                                                                                                                    add(\"abcdef\",\n                                                                                                                      add(\"&trace_id=\",\n                                                                                                                        add(traceId,\n                                                                                                                          add(\"123abc\",\n                                                                                                                            add(\"&span_id=\",\n                                                                                                                              add(spanId,\n                                                                                                                                add(\"456def\",\n                                                                                                                                  add(\"&user_agent=\",\n                                                                                                                                    add(userAgent,\n                                                                                                                                      add(\"&client_version=\",\n                                                                                                                                        add(clientVersion,\n                                                                                                                                          add(\"&platform=\",\n                                                                                                                                            add(platform,\n                                                                                                                                              add(\"&os_version=\",\n                                                                                                                                                add(osVersion,\n                                                                                                                                                  add(\"&auth_type=\",\n                                                                                                                                                    add(authType,\n                                                                                                                                                      add(\"&token=\",\n                                                                                                                                                        add(tokenPrefix,\n                                                                                                                                                          add(tokenMiddle,\n                                                                                                                                                            add(tokenSuffix,\n                                                                                                                                                              add(\"&api_key=\",\n                                                                                                                                                                add(apiKey,\n                                                                                                                                                                  add(\"789xyz\",\n                                                                                                                                                                    add(\"&api_secret=\",\n                                                                                                                                                                      add(apiSecret,\n                                                                                                                                                                        add(\"secret123\",\n                                                                                                                                                                          add(\"&client_id=\",\n                                                                                                                                                                            add(clientId,\n                                                                                                                                                                              add(\"client789\",\n                                                                                                                                                                                add(\"&client_secret=\",\n                                                                                                                                                                                  add(clientSecret,\n                                                                                                                                                                                    \"final_secret\"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))\n",
    "_hash": "4905a08c97c36dfb6508a7a606d188b7"
  },
  {
    "name": "Benchmark: addneg-orig",
    "path": "benchmarks/addneg-orig.over",
    "code": "assume addIntInt: (Int, Int) => Int;\nassume addI8I8: (Int8, Int8) => Int8;\nassume addI16I16: (Int16, Int16) => Int16;\nassume addI32I32: (Int32, Int32) => Int32;\nassume addI64I64: (Int64, Int64) => Int64;\nassume addUIntUInt: (UInt, UInt) => UInt;\nassume addU8U8: (UInt8, UInt8) => UInt8;\nassume addU16U16: (UInt16, UInt16) => UInt16;\nassume addU32U32: (UInt32, UInt32) => UInt32;\nassume addU64U64: (UInt64, UInt64) => UInt64;\nassume addDoubleDouble: (Double, Double) => Double;\n\nassume add = <addIntInt, addI8I8, addI16I16, addI32I32, addI64I64, addUIntUInt, addU8U8, addU16U16, addU32U32, addU64U64, addDoubleDouble>;\n\nassume negateInt: (Int) => Int;\nassume negateI8: (Int8) => Int8;\nassume negateI16: (Int16) => Int16;\nassume negateI32: (Int32) => Int32;\nassume negateI64: (Int64) => Int64;\nassume negateUInt: (UInt) => Int;\nassume negateU8: (UInt8) => UInt8;\nassume negateU16: (UInt16) => UInt16;\nassume negateU32: (UInt32) => UInt32;\nassume negateU64: (UInt64) => UInt64;\nassume negateDouble: (Double) => Double;\n\nassume negate = <negateInt, negateI8, negateI16, negateI32, negateI64, negateUInt, negateU8, negateU16, negateU32, negateU64, negateDouble>;\n\nassume asInt: (Int) => Int;\nassume asInt8: (Int) => Int8;\nassume asInt16: (Int) => Int16;\nassume asInt32: (Int) => Int32;\nassume asInt64: (Int) => Int64;\nassume asUInt: (Int) => UInt;\nassume asUInt8: (Int) => UInt8;\nassume asUInt16: (Int) => UInt16;\nassume asUInt32: (Int) => UInt32;\nassume asUInt64: (Int) => UInt64;\nassume asDouble: (Int) => Double;\n\nassume as = <asInt, asInt8, asInt16, asInt32, asInt64, asUInt, asUInt8, asUInt16, asUInt32, asUInt64, asDouble>;\n\nassume doubleIdentity: (Double) => Double;\n\ndoubleIdentity(add(negate(add(as(1), as(2))), add(negate(add(as(3), as(4))), as(5))))\n",
    "_hash": "841d2c00bc806babd1191959371fef75"
  },
  {
    "name": "Benchmark: addneg-big",
    "path": "benchmarks/addneg-big.over",
    "code": "assume addIntInt: (Int, Int) => Int;\nassume addI8I8: (Int8, Int8) => Int8;\nassume addI16I16: (Int16, Int16) => Int16;\nassume addI32I32: (Int32, Int32) => Int32;\nassume addI64I64: (Int64, Int64) => Int64;\nassume addI128I128: (Int128, Int128) => Int128;\nassume addI256I256: (Int256, Int256) => Int256;\nassume addI512I512: (Int512, Int512) => Int512;\nassume addI1024I1024: (Int1024, Int1024) => Int1024;\nassume addI2048I2048: (Int2048, Int2048) => Int2048;\nassume addI4096I4096: (Int4096, Int4096) => Int4096;\nassume addI8192I8192: (Int8192, Int8192) => Int8192;\nassume addI16384I16384: (Int16384, Int16384) => Int16384;\nassume addI32768I32768: (Int32768, Int32768) => Int32768;\nassume addI65536I65536: (Int65536, Int65536) => Int65536;\nassume addI131072I131072: (Int131072, Int131072) => Int131072;\nassume addI262144I262144: (Int262144, Int262144) => Int262144;\nassume addI524288I524288: (Int524288, Int524288) => Int524288;\nassume addI1048576I1048576: (Int1048576, Int1048576) => Int1048576;\nassume addI2097152I2097152: (Int2097152, Int2097152) => Int2097152;\nassume addI4194304I4194304: (Int4194304, Int4194304) => Int4194304;\nassume addI8388608I8388608: (Int8388608, Int8388608) => Int8388608;\nassume addI16777216I16777216: (Int16777216, Int16777216) => Int16777216;\nassume addI33554432I33554432: (Int33554432, Int33554432) => Int33554432;\nassume addI67108864I67108864: (Int67108864, Int67108864) => Int67108864;\nassume addI134217728I134217728: (Int134217728, Int134217728) => Int134217728;\nassume addI268435456I268435456: (Int268435456, Int268435456) => Int268435456;\nassume addI536870912I536870912: (Int536870912, Int536870912) => Int536870912;\nassume addI1073741824I1073741824: (Int1073741824, Int1073741824) => Int1073741824;\nassume addI2147483648I2147483648: (Int2147483648, Int2147483648) => Int2147483648;\nassume addI4294967296I4294967296: (Int4294967296, Int4294967296) => Int4294967296;\nassume addI8589934592I8589934592: (Int8589934592, Int8589934592) => Int8589934592;\nassume addI17179869184I17179869184: (Int17179869184, Int17179869184) => Int17179869184;\nassume addI34359738368I34359738368: (Int34359738368, Int34359738368) => Int34359738368;\nassume addI68719476736I68719476736: (Int68719476736, Int68719476736) => Int68719476736;\nassume addI137438953472I137438953472: (Int137438953472, Int137438953472) => Int137438953472;\nassume addI274877906944I274877906944: (Int274877906944, Int274877906944) => Int274877906944;\nassume addI549755813888I549755813888: (Int549755813888, Int549755813888) => Int549755813888;\nassume addI1099511627776I1099511627776: (Int1099511627776, Int1099511627776) => Int1099511627776;\nassume addI2199023255552I2199023255552: (Int2199023255552, Int2199023255552) => Int2199023255552;\nassume addUIntUInt: (UInt, UInt) => UInt;\nassume addU8U8: (UInt8, UInt8) => UInt8;\nassume addU16U16: (UInt16, UInt16) => UInt16;\nassume addU32U32: (UInt32, UInt32) => UInt32;\nassume addU64U64: (UInt64, UInt64) => UInt64;\nassume addU128U128: (UInt128, UInt128) => UInt128;\nassume addU256U256: (UInt256, UInt256) => UInt256;\nassume addU512U512: (UInt512, UInt512) => UInt512;\nassume addU1024U1024: (UInt1024, UInt1024) => UInt1024;\nassume addU2048U2048: (UInt2048, UInt2048) => UInt2048;\nassume addU4096U4096: (UInt4096, UInt4096) => UInt4096;\nassume addU8192U8192: (UInt8192, UInt8192) => UInt8192;\nassume addU16384U16384: (UInt16384, UInt16384) => UInt16384;\nassume addU32768U32768: (UInt32768, UInt32768) => UInt32768;\nassume addU65536U65536: (UInt65536, UInt65536) => UInt65536;\nassume addU131072U131072: (UInt131072, UInt131072) => UInt131072;\nassume addU262144U262144: (UInt262144, UInt262144) => UInt262144;\nassume addU524288U524288: (UInt524288, UInt524288) => UInt524288;\nassume addU1048576U1048576: (UInt1048576, UInt1048576) => UInt1048576;\nassume addU2097152U2097152: (UInt2097152, UInt2097152) => UInt2097152;\nassume addU4194304U4194304: (UInt4194304, UInt4194304) => UInt4194304;\nassume addU8388608U8388608: (UInt8388608, UInt8388608) => UInt8388608;\nassume addU16777216U16777216: (UInt16777216, UInt16777216) => UInt16777216;\nassume addU33554432U33554432: (UInt33554432, UInt33554432) => UInt33554432;\nassume addU67108864U67108864: (UInt67108864, UInt67108864) => UInt67108864;\nassume addU134217728U134217728: (UInt134217728, UInt134217728) => UInt134217728;\nassume addU268435456U268435456: (UInt268435456, UInt268435456) => UInt268435456;\nassume addU536870912U536870912: (UInt536870912, UInt536870912) => UInt536870912;\nassume addU1073741824U1073741824: (UInt1073741824, UInt1073741824) => UInt1073741824;\nassume addU2147483648U2147483648: (UInt2147483648, UInt2147483648) => UInt2147483648;\nassume addU4294967296U4294967296: (UInt4294967296, UInt4294967296) => UInt4294967296;\nassume addU8589934592U8589934592: (UInt8589934592, UInt8589934592) => UInt8589934592;\nassume addU17179869184U17179869184: (UInt17179869184, UInt17179869184) => UInt17179869184;\nassume addU34359738368U34359738368: (UInt34359738368, UInt34359738368) => UInt34359738368;\nassume addU68719476736U68719476736: (UInt68719476736, UInt68719476736) => UInt68719476736;\nassume addU137438953472U137438953472: (UInt137438953472, UInt137438953472) => UInt137438953472;\nassume addU274877906944U274877906944: (UInt274877906944, UInt274877906944) => UInt274877906944;\nassume addU549755813888U549755813888: (UInt549755813888, UInt549755813888) => UInt549755813888;\nassume addU1099511627776U1099511627776: (UInt1099511627776, UInt1099511627776) => UInt1099511627776;\nassume addU2199023255552U2199023255552: (UInt2199023255552, UInt2199023255552) => UInt2199023255552;\nassume addDoubleDouble: (Double, Double) => Double;\nassume addF80F80: (F80, F80) => F80;\n\nassume add = <addIntInt, addI8I8, addI16I16, addI32I32, addI64I64, addI128I128, addI256I256, addI512I512, addI1024I1024, addI2048I2048, addI4096I4096, addI8192I8192, addI16384I16384, addI32768I32768, addI65536I65536, addI131072I131072, addI262144I262144, addI524288I524288, addI1048576I1048576, addI2097152I2097152, addI4194304I4194304, addI8388608I8388608, addI16777216I16777216, addI33554432I33554432, addI67108864I67108864, addI134217728I134217728, addI268435456I268435456, addI536870912I536870912, addI1073741824I1073741824, addI2147483648I2147483648, addI4294967296I4294967296, addI8589934592I8589934592, addI17179869184I17179869184, addI34359738368I34359738368, addI68719476736I68719476736, addI137438953472I137438953472, addI274877906944I274877906944, addI549755813888I549755813888, addI1099511627776I1099511627776, addI2199023255552I2199023255552, addUIntUInt, addU8U8, addU16U16, addU32U32, addU64U64, addU128U128, addU256U256, addU512U512, addU1024U1024, addU2048U2048, addU4096U4096, addU8192U8192, addU16384U16384, addU32768U32768, addU65536U65536, addU131072U131072, addU262144U262144, addU524288U524288, addU1048576U1048576, addU2097152U2097152, addU4194304U4194304, addU8388608U8388608, addU16777216U16777216, addU33554432U33554432, addU67108864U67108864, addU134217728U134217728, addU268435456U268435456, addU536870912U536870912, addU1073741824U1073741824, addU2147483648U2147483648, addU4294967296U4294967296, addU8589934592U8589934592, addU17179869184U17179869184, addU34359738368U34359738368, addU68719476736U68719476736, addU137438953472U137438953472, addU274877906944U274877906944, addU549755813888U549755813888, addU1099511627776U1099511627776, addU2199023255552U2199023255552, addDoubleDouble, addF80F80>;\n// 82\nassume negateInt: (Int) => Int;\nassume negateI8: (I8) => I8;\nassume negateI16: (I16) => I16;\nassume negateI32: (I32) => I32;\nassume negateI64: (I64) => I64;\nassume negateI128: (I128) => I128;\nassume negateI256: (I256) => I256;\nassume negateI512: (I512) => I512;\nassume negateI1024: (I1024) => I1024;\nassume negateI2048: (I2048) => I2048;\nassume negateI4096: (I4096) => I4096;\nassume negateI8192: (I8192) => I8192;\nassume negateI16384: (I16384) => I16384;\nassume negateI32768: (I32768) => I32768;\nassume negateI65536: (I65536) => I65536;\nassume negateI131072: (I131072) => I131072;\nassume negateI262144: (I262144) => I262144;\nassume negateI524288: (I524288) => I524288;\nassume negateI1048576: (I1048576) => I1048576;\nassume negateI2097152: (I2097152) => I2097152;\nassume negateI4194304: (I4194304) => I4194304;\nassume negateI8388608: (I8388608) => I8388608;\nassume negateI16777216: (I16777216) => I16777216;\nassume negateI33554432: (I33554432) => I33554432;\nassume negateI67108864: (I67108864) => I67108864;\nassume negateI134217728: (I134217728) => I134217728;\nassume negateI268435456: (I268435456) => I268435456;\nassume negateI536870912: (I536870912) => I536870912;\nassume negateI1073741824: (I1073741824) => I1073741824;\nassume negateI2147483648: (I2147483648) => I2147483648;\nassume negateI4294967296: (I4294967296) => I4294967296;\nassume negateI8589934592: (I8589934592) => I8589934592;\nassume negateI17179869184: (I17179869184) => I17179869184;\nassume negateI34359738368: (I34359738368) => I34359738368;\nassume negateI68719476736: (I68719476736) => I68719476736;\nassume negateI137438953472: (I137438953472) => I137438953472;\nassume negateI274877906944: (I274877906944) => I274877906944;\nassume negateI549755813888: (I549755813888) => I549755813888;\nassume negateI1099511627776: (I1099511627776) => I1099511627776;\nassume negateI2199023255552: (I2199023255552) => I2199023255552;\nassume negateUInt: (UInt) => UInt;\nassume negateU8: (U8) => U8;\nassume negateU16: (U16) => U16;\nassume negateU32: (U32) => U32;\nassume negateU64: (U64) => U64;\nassume negateU128: (U128) => U128;\nassume negateU256: (U256) => U256;\nassume negateU512: (U512) => U512;\nassume negateU1024: (U1024) => U1024;\nassume negateU2048: (U2048) => U2048;\nassume negateU4096: (U4096) => U4096;\nassume negateU8192: (U8192) => U8192;\nassume negateU16384: (U16384) => U16384;\nassume negateU32768: (U32768) => U32768;\nassume negateU65536: (U65536) => U65536;\nassume negateU131072: (U131072) => U131072;\nassume negateU262144: (U262144) => U262144;\nassume negateU524288: (U524288) => U524288;\nassume negateU1048576: (U1048576) => U1048576;\nassume negateU2097152: (U2097152) => U2097152;\nassume negateU4194304: (U4194304) => U4194304;\nassume negateU8388608: (U8388608) => U8388608;\nassume negateU16777216: (U16777216) => U16777216;\nassume negateU33554432: (U33554432) => U33554432;\nassume negateU67108864: (U67108864) => U67108864;\nassume negateU134217728: (U134217728) => U134217728;\nassume negateU268435456: (U268435456) => U268435456;\nassume negateU536870912: (U536870912) => U536870912;\nassume negateU1073741824: (U1073741824) => U1073741824;\nassume negateU2147483648: (U2147483648) => U2147483648;\nassume negateU4294967296: (U4294967296) => U4294967296;\nassume negateU8589934592: (U8589934592) => U8589934592;\nassume negateU17179869184: (U17179869184) => U17179869184;\nassume negateU34359738368: (U34359738368) => U34359738368;\nassume negateU68719476736: (U68719476736) => U68719476736;\nassume negateU137438953472: (U137438953472) => U137438953472;\nassume negateU274877906944: (U274877906944) => U274877906944;\nassume negateU549755813888: (U549755813888) => U549755813888;\nassume negateU1099511627776: (U1099511627776) => U1099511627776;\nassume negateU2199023255552: (U2199023255552) => U2199023255552;\nassume negateDouble: (Double) => Double;\nassume negateF80: (F80) => F80;\n\nassume negate = <negateInt, negateI8, negateI16, negateI32, negateI64, negateI128, negateI256, negateI512, negateI1024, negateI2048, negateI4096, negateI8192, negateI16384, negateI32768, negateI65536, negateI131072, negateI262144, negateI524288, negateI1048576, negateI2097152, negateI4194304, negateI8388608, negateI16777216, negateI33554432, negateI67108864, negateI134217728, negateI268435456, negateI536870912, negateI1073741824, negateI2147483648, negateI4294967296, negateI8589934592, negateI17179869184, negateI34359738368, negateI68719476736, negateI137438953472, negateI274877906944, negateI549755813888, negateI1099511627776, negateI2199023255552, negateUInt, negateU8, negateU16, negateU32, negateU64, negateU128, negateU256, negateU512, negateU1024, negateU2048, negateU4096, negateU8192, negateU16384, negateU32768, negateU65536, negateU131072, negateU262144, negateU524288, negateU1048576, negateU2097152, negateU4194304, negateU8388608, negateU16777216, negateU33554432, negateU67108864, negateU134217728, negateU268435456, negateU536870912, negateU1073741824, negateU2147483648, negateU4294967296, negateU8589934592, negateU17179869184, negateU34359738368, negateU68719476736, negateU137438953472, negateU274877906944, negateU549755813888, negateU1099511627776, negateU2199023255552, negateDouble, negateF80>;\n// 82\nassume asInt: (Int) => Int;\nassume asI8: (Int) => I8;\nassume asI16: (Int) => I16;\nassume asI32: (Int) => I32;\nassume asI64: (Int) => I64;\nassume asI128: (Int) => I128;\nassume asI256: (Int) => I256;\nassume asI512: (Int) => I512;\nassume asI1024: (Int) => I1024;\nassume asI2048: (Int) => I2048;\nassume asI4096: (Int) => I4096;\nassume asI8192: (Int) => I8192;\nassume asI16384: (Int) => I16384;\nassume asI32768: (Int) => I32768;\nassume asI65536: (Int) => I65536;\nassume asI131072: (Int) => I131072;\nassume asI262144: (Int) => I262144;\nassume asI524288: (Int) => I524288;\nassume asI1048576: (Int) => I1048576;\nassume asI2097152: (Int) => I2097152;\nassume asI4194304: (Int) => I4194304;\nassume asI8388608: (Int) => I8388608;\nassume asI16777216: (Int) => I16777216;\nassume asI33554432: (Int) => I33554432;\nassume asI67108864: (Int) => I67108864;\nassume asI134217728: (Int) => I134217728;\nassume asI268435456: (Int) => I268435456;\nassume asI536870912: (Int) => I536870912;\nassume asI1073741824: (Int) => I1073741824;\nassume asI2147483648: (Int) => I2147483648;\nassume asI4294967296: (Int) => I4294967296;\nassume asI8589934592: (Int) => I8589934592;\nassume asI17179869184: (Int) => I17179869184;\nassume asI34359738368: (Int) => I34359738368;\nassume asI68719476736: (Int) => I68719476736;\nassume asI137438953472: (Int) => I137438953472;\nassume asI274877906944: (Int) => I274877906944;\nassume asI549755813888: (Int) => I549755813888;\nassume asI1099511627776: (Int) => I1099511627776;\nassume asI2199023255552: (Int) => I2199023255552;\nassume asUInt: (Int) => UInt;\nassume asU8: (Int) => U8;\nassume asU16: (Int) => U16;\nassume asU32: (Int) => U32;\nassume asU64: (Int) => U64;\nassume asU128: (Int) => U128;\nassume asU256: (Int) => U256;\nassume asU512: (Int) => U512;\nassume asU1024: (Int) => U1024;\nassume asU2048: (Int) => U2048;\nassume asU4096: (Int) => U4096;\nassume asU8192: (Int) => U8192;\nassume asU16384: (Int) => U16384;\nassume asU32768: (Int) => U32768;\nassume asU65536: (Int) => U65536;\nassume asU131072: (Int) => U131072;\nassume asU262144: (Int) => U262144;\nassume asU524288: (Int) => U524288;\nassume asU1048576: (Int) => U1048576;\nassume asU2097152: (Int) => U2097152;\nassume asU4194304: (Int) => U4194304;\nassume asU8388608: (Int) => U8388608;\nassume asU16777216: (Int) => U16777216;\nassume asU33554432: (Int) => U33554432;\nassume asU67108864: (Int) => U67108864;\nassume asU134217728: (Int) => U134217728;\nassume asU268435456: (Int) => U268435456;\nassume asU536870912: (Int) => U536870912;\nassume asU1073741824: (Int) => U1073741824;\nassume asU2147483648: (Int) => U2147483648;\nassume asU4294967296: (Int) => U4294967296;\nassume asU8589934592: (Int) => U8589934592;\nassume asU17179869184: (Int) => U17179869184;\nassume asU34359738368: (Int) => U34359738368;\nassume asU68719476736: (Int) => U68719476736;\nassume asU137438953472: (Int) => U137438953472;\nassume asU274877906944: (Int) => U274877906944;\nassume asU549755813888: (Int) => U549755813888;\nassume asU1099511627776: (Int) => U1099511627776;\nassume asU2199023255552: (Int) => U2199023255552;\nassume asDouble: (Int) => Double;\nassume asF80: (Int) => F80;\n\nassume as = <asInt, asI8, asI16, asI32, asI64, asI128, asI256, asI512, asI1024, asI2048, asI4096, asI8192, asI16384, asI32768, asI65536, asI131072, asI262144, asI524288, asI1048576, asI2097152, asI4194304, asI8388608, asI16777216, asI33554432, asI67108864, asI134217728, asI268435456, asI536870912, asI1073741824, asI2147483648, asI4294967296, asI8589934592, asI17179869184, asI34359738368, asI68719476736, asI137438953472, asI274877906944, asI549755813888, asI1099511627776, asI2199023255552, asUInt, asU8, asU16, asU32, asU64, asU128, asU256, asU512, asU1024, asU2048, asU4096, asU8192, asU16384, asU32768, asU65536, asU131072, asU262144, asU524288, asU1048576, asU2097152, asU4194304, asU8388608, asU16777216, asU33554432, asU67108864, asU134217728, asU268435456, asU536870912, asU1073741824, asU2147483648, asU4294967296, asU8589934592, asU17179869184, asU34359738368, asU68719476736, asU137438953472, asU274877906944, asU549755813888, asU1099511627776, asU2199023255552, asDouble, asF80>;\n// 82\nassume doubleIdentity: (Double) => Double;\n\ndoubleIdentity(\n  negate(add(\n    add(negate(add(as(1), as(2))), add(negate(add(as(3), as(4))), as(5))),\n    add(negate(add(as(1), as(2))), add(negate(add(as(3), as(4))), as(5)))))\n)\n",
    "_hash": "cfaf52f920cccccec147162b82cfebab"
  },
  {
    "name": "Benchmark: recur",
    "path": "benchmarks/recur.over",
    "code": "assume emptyD: (Double) => Bool; assume emptyI: (Int) => Bool; assume emptyS: (String) => Bool;\nassume addS: (String, String) => String; assume addD: (Double, Double) => Double; assume addI: (Int, Int) => Int;\nassume subD: (Double, Double) => Double; assume subI: (Int, Int) => Int;\n\nassume myShowStr: (String) => String;\n\n// We're defining a function `myShowInt`, an \"instance\" of `Show`\n// that uses both itself and `myShowStr` inside.\nlet rec myShowInt = \u03bb n =>\n  // First declare the overloads\n  let empty = e<emptyD, emptyI, emptyS>;\n  let show1 = s<myShowInt, myShowStr>;\n  let show2 = r<myShowInt, myShowStr>;\n  let add = a<addD, addI, addS>;\n  let sub = m<subD, subI>;\n\n  // Then actually use them in the program:\n  if empty(n)\n    then show1(\"\")\n    else\n      add(\"|\", show2(sub(n, 1))); // unary encoding, recursive\n\nmyShowInt\n\n// The solution is:\n// e\u2082 (emptyI) & s\u2082 (myShowStr) & r\u2081 (myShowInt) & a\u2083 (addS) & m\u2082 (subI)\n",
    "_hash": "b10f65a94e648b83287f0c8bd36de619"
  },
  {
    "name": "Benchmark: dist",
    "path": "benchmarks/dist.over",
    "code": "assume getX2i: (Vec2i) => Int;\nassume getY2i: (Vec2i) => Int;\n\nassume getX3i: (Vec3i) => Int;\nassume getY3i: (Vec3i) => Int;\nassume getZ3i: (Vec3i) => Int;\n\nassume getX2d: (Vec2d) => Double;\nassume getY2d: (Vec2d) => Double;\n\nassume getX3d: (Vec3d) => Double;\nassume getY3d: (Vec3d) => Double;\nassume getZ3d: (Vec3d) => Double;\n\nassume x = <getX2i, getX3i, getX2d, getX3d>;\nassume y = <getY2i, getY3i, getY2d, getY3d>;\nassume z = <getZ3i, getZ3d>;\n\nassume addI: (Int, Int) => Int;\nassume addD: (Double, Double) => Double;\nassume add = <addI, addD>;\n\nassume subI: (Int, Int) => Int;\nassume subD: (Double, Double) => Double;\nassume sub = <subI, subD>;\n\nassume sqr: (Double) => Double;\n\nassume powD: (Double, Int) => Double;\nassume powI: (Int, Int) => Int;\nassume pow = <powD, powI>;\n\n// \"type annotation\"\nassume anno: ((Vec3d, Vec3d) => Double) => ((Vec3d, Vec3d) => Double);\n\nlet f = \u03bb(p1, p2) =>\n  let dx = pow(sub(x(p1), x(p2)), 2);\n  let dy = pow(sub(y(p1), y(p2)), 2);\n  let dz = pow(sub(z(p1), z(p2)), 2);\n  sqr(add(dx, add(dy, dz)));\n \n// try replacing this with just `f` to see the \"lateral\" problem\nanno(f)\n\n",
    "_hash": "486360f86958881b19d5b133ffdb9c7a"
  },
  {
    "name": "Benchmark: cps N = 10",
    "path": "benchmarks/cps-10.over",
    "code": "// these are called 'f' in the paper\nassume addString: (String) => Int;\nassume addInt: (Int) => Int;\n\n// syntax sugar:\n// every time 'add' is seen, rewrite it into a fresh choice with `addString, addInt` as the alternatives \nassume add = <addString, addInt>;\n\nassume callString: \u2200(R). ((String) => R) => R;\nassume callInt: \u2200(R). ((Int) => R) => R;\n\nassume compose: \u2200(R). ((R) => R, (R) => R) => ((R) => R);\n\ncall<callInt, callString>(compose(compose(compose(compose(compose(compose(compose(compose(compose(add, add), add), add), add), add), add), add), add), add))\n\n",
    "_hash": "911b24334cbbc091ea085dafecf186d5"
  },
  {
    "name": "Benchmark: cps N = 20",
    "path": "benchmarks/cps-20.over",
    "code": "// see cps-10 for more info\nassume addString: (String) => Int;\nassume addInt: (Int) => Int;\n\nassume add = <addString, addInt>;\n\nassume callString: \u2200(R). ((String) => R) => R;\nassume callInt: \u2200(R). ((Int) => R) => R;\n\nassume compose: \u2200(R). ((R) => R, (R) => R) => ((R) => R);\n\ncall<callInt, callString>(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(add, add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add))\n\n",
    "_hash": "d667e291afeebfe2fce69d40c22f0fb8"
  },
  {
    "name": "Benchmark: cps N = 100",
    "path": "benchmarks/cps-100.over",
    "code": "// see cps-10 for more info\nassume addString: (String) => Int;\nassume addInt: (Int) => Int;\n\nassume add = <addString, addInt>;\n\nassume callString: \u2200(R). ((String) => R) => R;\nassume callInt: \u2200(R). ((Int) => R) => R;\n\nassume compose: \u2200(R). ((R) => R, (R) => R) => ((R) => R);\n\ncall<callInt, callString>(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(compose(add, add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add), add))\n\n\n",
    "_hash": "fb1bb6f09ea70067a29b277e2c81e7d4"
  },
  {
    "name": "Application, forwards and backwards",
    "path": "examples/app-reverse-app.over",
    "code": "// Example: application forwards and backwards\nassume succInt: Int => Int;\n\n// monomorphic, tries to apply f(x) or x(f)\nlet app = \u03bb(f, x) =>\n  a<f(x), x(f)>;\n\napp(succInt, 42)\n",
    "_hash": "b2194e92d402b21ddb4367f3f7b2354e"
  },
  {
    "name": "Apply: no overload",
    "path": "examples/apply-no-overload.over",
    "code": "assume apply: \u2200(A, B) . (A => B) => A => B;\n\n// Basic test for polytypes\nlet double = \u03bb x => x in\napply(double)(42)\n",
    "_hash": "54f6b165069183ff82193c2f7e0d57d5"
  },
  {
    "name": "Apply: addOne",
    "path": "examples/apply-add-one.over",
    "code": "assume apply: \u2200(A, B) . (A => B) => A => B;\nassume addOneI: Int => Int;\nassume addOneS: String => String;\nassume addOneD: Double => Double;\n\n// Only the `addOneI` solution (a = 1) is valid here, determined by the `42`.\nlet addOne = a<addOneI, addOneS, addOneD> in\napply(addOne)(42)\n",
    "_hash": "726be864cdeb34184a8953958e6ed79e"
  },
  {
    "name": "Apply: addOne with lambda",
    "path": "examples/apply-add-one-lambda.over",
    "code": "assume apply: \u2200(A, B) . (A => B) => A => B;\nassume addOneI: Int => Int;\nassume addOneS: String => String;\nassume addOneD: Double => Double;\n\n// Each of the solutions is equally valid here.\nlet addOne = a<addOneI, addOneS, addOneD> in\n\u03bb x => apply(addOne)(x)\n",
    "_hash": "45af7cbc8847d054ad6fead0c3cd0a04"
  },
  {
    "name": "Arity-based overloading",
    "path": "examples/arity.over",
    "code": "// Example: arity-based overloading\nassume add1: (Int) => Int;\nassume add2: (Int, Int) => Int;\nassume add3: (Int, Int, Int) => Int;\nassume add4: (Int, Int, Int, Int) => Int;\n\nlet add_a = a<add1, add2, add3, add4>;\nlet _ = add_a(1, 2, 3); // => a = 3\n\nlet add_b = b<add1, add2, add3, add4>;\nadd_b(4, 5) // => b = 2\n\n// Single world: a = 3 & b = 2\n",
    "_hash": "a6b3867f83830f977120ce95d5f6d44a"
  },
  {
    "name": "Currying",
    "path": "examples/beginners.over",
    "code": "assume curryIntString: (Int) => ((String) => Int);\nassume curryIntInt: (Int) => ((Int) => Int);\n\nlet f = a<curryIntString, curryIntInt>(5);\nf(50)\n// Beware that `f` is not polymorphic in its choice.\n// Try replacing `f(50)` with:\n// `let _ = f(50) in f(\"hello\")`\n// and you'll see that the overload resolution fails!",
    "_hash": "858319051d45af5c8caae610a966fe2d"
  },
  {
    "name": "Combine example",
    "path": "examples/combine.over",
    "code": "assume concat: (String, String) => String;\nassume intToString: Int => String;\nassume max: (Int, Int) => Int;\n\nlet combine = a<max, concat>;\n\nlet convertAndApply = \u03bb(x) =>\n  let s = intToString(x);\n  let converted = b<x, s>;\n  combine(converted, converted);\n\nconvertAndApply(42)\n",
    "_hash": "86c7dcedaef0147bb479122abf059fe4"
  },
  {
    "name": "Same dimension twice",
    "path": "examples/same-dimension-twice.over",
    "code": "// Example: Section 2.1, but same dimension `a` everywhere!\nassume addInt: (Int, Int) => Int;\nassume addString: (String, String) => String;\n\n\u03bb(x) =>\n  let add_b = a<addInt, addString>;\n  let inner = add_b(x, x);\n  let add_a = a<addInt, addString>;\n  add_a(0, inner)\n",
    "_hash": "2097c7c53b495d0e5511eb4965d5a29c"
  },
  {
    "name": "Overloaded add on strings",
    "path": "examples/small.over",
    "code": "assume addInt: (Int, Int) => Int;\nassume addString: (String, String) => String;\n\n// \"hello\" + \"there\" + \"world\"\nlet add1 = a<addInt, addString> in\nlet add2 = b<addInt, addString> in\nadd1(add2(\"hello\", \"there\"), \"world\")\n",
    "_hash": "a7c303e3eb9b2977640c27fae93ee9fd"
  },
  {
    "name": "\u03bbx => x + x + ..., clustered",
    "path": "examples/x-add-x-many.over",
    "code": "assume addInt: (Int, Int) => Int;\nassume addString: (String, String) => String;\nassume addDouble: (Double, Double) => Double;\n\n// independent chains of\n// r1 := \u03bbx => x + x + x + ...\n// r2 := \u03bbx => x + x + x + ...\n// ...\n\nlet r1 = \u03bb(x) =>\n  a1<addDouble,addInt,addString>(\n    a2<addDouble,addInt,addString>(\n      a3<addDouble,addInt,addString>(\n        a4<addDouble,addInt,addString>(\n          a5<addDouble,addInt,addString>(\n            a6<addDouble,addInt,addString>(\n              a7<addDouble,addInt,addString>(\n                a8<addDouble,addInt,addString>(\n                  a9<addDouble,addInt,addString>(\n                    a10<addDouble,addInt,addString>(\n                      a11<addDouble,addInt,addString>(\n                        a12<addDouble,addInt,addString>(\n                          a13<addDouble,addInt,addString>(\n                            x, x), x), x), x), x), x), x), x), x), x), x), x), x);\n\nlet r2 = \u03bb(x) =>\n  a21<addDouble,addInt,addString>(\n    a22<addDouble,addInt,addString>(\n      a23<addDouble,addInt,addString>(\n        a24<addDouble,addInt,addString>(\n          a25<addDouble,addInt,addString>(\n            a26<addDouble,addInt,addString>(\n              a27<addDouble,addInt,addString>(\n                a28<addDouble,addInt,addString>(\n                  a29<addDouble,addInt,addString>(\n                    a210<addDouble,addInt,addString>(\n                      a211<addDouble,addInt,addString>(\n                        a212<addDouble,addInt,addString>(\n                          a213<addDouble,addInt,addString>(\n                            x, x), x), x), x), x), x), x), x), x), x), x), x), x);\n\nlet r3 = \u03bb(x) =>\n  a31<addDouble,addInt,addString>(\n    a32<addDouble,addInt,addString>(\n      a33<addDouble,addInt,addString>(\n        a34<addDouble,addInt,addString>(\n          a35<addDouble,addInt,addString>(\n            a36<addDouble,addInt,addString>(\n              a37<addDouble,addInt,addString>(\n                a38<addDouble,addInt,addString>(\n                  a39<addDouble,addInt,addString>(\n                    a310<addDouble,addInt,addString>(\n                      a311<addDouble,addInt,addString>(\n                        a312<addDouble,addInt,addString>(\n                          a313<addDouble,addInt,addString>(\n                            x, x), x), x), x), x), x), x), x), x), x), x), x), x);\n\nlet r4 = \u03bb(x) =>\n  a41<addDouble,addInt,addString>(\n    a42<addDouble,addInt,addString>(\n      a43<addDouble,addInt,addString>(\n        a44<addDouble,addInt,addString>(\n          a45<addDouble,addInt,addString>(\n            a46<addDouble,addInt,addString>(\n              a47<addDouble,addInt,addString>(\n                a48<addDouble,addInt,addString>(\n                  a49<addDouble,addInt,addString>(\n                    a410<addDouble,addInt,addString>(\n                      a411<addDouble,addInt,addString>(\n                        a412<addDouble,addInt,addString>(\n                          a413<addDouble,addInt,addString>(\n                            x, x), x), x), x), x), x), x), x), x), x), x), x), x);\n\nlet r5 = \u03bb(x) =>\n  a51<addDouble,addInt,addString>(\n    a52<addDouble,addInt,addString>(\n      a53<addDouble,addInt,addString>(\n        a54<addDouble,addInt,addString>(\n          a55<addDouble,addInt,addString>(\n            a56<addDouble,addInt,addString>(\n              a57<addDouble,addInt,addString>(\n                a58<addDouble,addInt,addString>(\n                  a59<addDouble,addInt,addString>(\n                    a510<addDouble,addInt,addString>(\n                      a511<addDouble,addInt,addString>(\n                        a512<addDouble,addInt,addString>(\n                          a513<addDouble,addInt,addString>(\n                            x, x), x), x), x), x), x), x), x), x), x), x), x), x);\n\n42\n",
    "_hash": "e8a3184dddaf233d7355ededc7fd2ab1"
  },
  {
    "name": "\u03bbx => x + x + ...",
    "path": "examples/x-add-x.over",
    "code": "assume addInt: (Int, Int) => Int;\nassume addString: (String, String) => String;\nassume addDouble: (Double, Double) => Double;\n\n// \u03bbx => x + x + x + ...\n\u03bb(x) =>\n  a1<addDouble,addInt,addString>(\n    a2<addDouble,addInt,addString>(\n      a3<addDouble,addInt,addString>(\n        a4<addDouble,addInt,addString>(\n          a5<addDouble,addInt,addString>(\n            a6<addDouble,addInt,addString>(\n              a7<addDouble,addInt,addString>(\n                a8<addDouble,addInt,addString>(\n                  a9<addDouble,addInt,addString>(\n                    a10<addDouble,addInt,addString>(\n                      a11<addDouble,addInt,addString>(\n                        a12<addDouble,addInt,addString>(\n                          a13<addDouble,addInt,addString>(\n                            x, x), x), x), x), x), x), x), x), x), x), x), x), x)\n",
    "_hash": "55218c80646d84fbad8cafa736edcf2e"
  }
]